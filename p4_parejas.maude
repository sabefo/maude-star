fmod TABLAHASH is
 pr NAT .
 sorts IdNodo Tablahash .

 op Id_ : Nat -> IdNodo [ctor] . *** Constructor de IdNodo
 op tv : Tablahash . *** Tabla vacia
 op [_,_] : Nat IdNodo -> Tablahash [ctor] .
 op _ _ : Tablahash Tablahash -> tablahash [ctor id: tv] .

endfm

fmod RED is
 pr NAT .
 pr TABLAHASH .

 var S : Sistema .
 var L : Localizacion .

 sorts Localizacion Sistema Contenidos Nodo Msj Socket ListaMsj Id .
 subsort Localizacion Socket < Sistema .
 

 *** Define los subtipos entre Contenidos y Nodo y Msj
 subsort Msj Nodo < Contenidos .
 op __ : Contenidos Contenidos -> Contenidos [ctor assoc comm] .
  
 *** Define los subtipos entre Msj y ListaMsj
 subsort Msj < ListaMsj .
 op _,_ : ListaMsj ListaMsj -> ListaMsj [ctor assoc] .

 op info : Nat Nat IdNodo -> Msj [ctor] .
 op respuesta-info : IdNodo -> Msj [ctor] .
 op to_:_ : IdNodo String -> Msj [ctor] .
 op numNodos : Sistema -> Nat .
 eq numNodos(L S) = numNodos(S) + 1 .
 eq numNodos(S) = 0 [owise] .

 op none : -> Sistema [ctor] .
 op {_|_} : Nat Contenidos -> Localizacion [ctor] .
 op __ : Sistema Sistema -> Sistema [ctor assoc comm id: none] .

 op <_|_;_|_> : Nat ListaMsj ListaMsj Nat -> Socket [ctor] .

 *** Termina de definir constructores

 op idNodo : String -> Id .
 idNodo("a")

 *** Nat es un estado, en el extremo puede ser INACTIVO, ACTIVO y ESPERANDO, en el centro puede ser ACTIVO e INACTIVO
 op extremo : Id Nat ListaIds String -> Nodo .
 op centro : Id Tabla Nat -> Nodo .
endfm

mod COMPORTAMIENTO is
 *** Importa los modulos correspondientes

 *** Define el comportamiento de la red mediante reglas
endm

mod EJEMPLO is
 *** Importa los modulos correspondientes

 op init : -> Sistema .
 *** Define un término inicial sobre el que probar las propiedades siguiendo el enunciado
 *** red init = { 0 | ... } *** Dentro habrá un nodo
 ***            { 1 | ... }
 ***            ...
 ***            < 0 | ... ; ... | 1 > *** Socket que une 0 y 1. Los puntos suspensivos serán listas vacías
endm

rew init .

*** search init ...

load model-checker

mod PROPS is
 *** Importa los modulos correspondientes

 *** Define las propiedades
endm

mod TEST is
 *** Importa los modulos correspondientes
endm

eof

*** Define y comprueba las propiedades

red modelCheck(init, ...) .